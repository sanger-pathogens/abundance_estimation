params {
    queue_size = 50
    submit_rate_limit = '50/2min'
    results_dir = "./nextflow_results"
    manifest = ""
    btidx = "/lustre/scratch118/infgen/team162/shared/gtdb_genomes_reps_r202/gtdb_genomes_reps_r202.fasta.bt2"
    genome_file = "/lustre/scratch118/infgen/team162/shared/gtdb_genomes_reps_r202/gtdb_genomes_reps_r202.fasta"
    stb_file = "/lustre/scratch118/infgen/team162/shared/gtdb_genomes_reps_r202/gtdb_genomes_reps_r202.stb"
    bowtie2_samtools_threads = 16
    instrain_threads = 16
    full_output = false
    no_cleanup = false
    cleanup_metawrapqc = true
    cleanup_bowtie2samtools = true
    cleanup_instrain = true
    skip_qc = false
    metawrap_qc_queue = "normal"
    instrain_queue = "normal"
    bowtie2samtools_queue = "normal"
}


profiles {

    standard {
        docker {
            enabled = true
        }
    }

    // Basic configuration for Nextflow LSF management on the Sanger farm.
    sanger_lsf {

        docker {
            enabled = false
        }

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = "$PWD"
            runOptions = "--bind /lustre,/nfs,/software"
        }

        process {
            cpus = 1
            memory = "2GB"
            queue = "normal"
            errorStrategy = {task.attempt <= 2 ? "retry" : "terminate"}
            maxRetries = 1

            withName:metawrap_qc {
                cpus = 1
                memory = 20.GB
                queue = params.metawrap_qc_queue
                executor = "lsf"
            }

            withName:instrain {
                cpus = params.instrain_threads
                memory = {200.GB + (100.GB * task.attempt)}
                queue = params.instrain_queue
                executor = "lsf"
            }

            withName:instrain_full_output {
                cpus = params.instrain_threads
                memory = {200.GB + (100.GB * task.attempt)}
                queue = params.instrain_queue
                executor = "lsf"
            }

            withName:bowtie2samtools {
                cpus = params.bowtie2_samtools_threads
                memory = {150.GB + (100.GB * task.attempt)}
                queue = params.bowtie2samtools_queue
                executor = "lsf"
            }
        }
        executor {
            name = "lsf"
            perJobMemLimit = true
            // Maximum number of jobs to spawn at once - adjust as necessary
            queueSize = params.queue_size
            submitRateLimit = params.submit_rate_limit
            jobName = { "meta_abundance - $task.name - $task.hash" }
            pollInterval = "5 sec"
        }
    }
}
